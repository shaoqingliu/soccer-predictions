source("computeStr.R")
source("computeStr.R")
source("computeStr.R")
source("computeStr.R")
A <- matrix(1, 2, 2)
A
A[1, 1] <- 0
A[2, 2] <- 0
A
A[2, 1] <- 0
A
teamStr <- matrix(1, 2, 2)
teamStr
c <- 0.4
tolRel <- 1e-03
tolScale <- 1e-03
computeStr(A, teamStr, c, tolRel, tolScale)
source("computeStr.R")
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
c
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
c
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
teamStr
a <- teamStr[, 1]
a
a <- t(teamStr[, 1])
a
a <- teamStr[, 1]
a
t(a)
a
x %*% y
A %*% a
A
a
A * a
a
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
c <- 0.01
computeStr(A, teamStr, c, tolRel, tolScale)
A
A[1, 2] <- 3
computeStr(A, teamStr, c, tolRel, tolScale)
A[1, 2] <-1
A[1, 2] <- 1
computeStr(A, teamStr, c, tolRel, tolScale)
A[1, 2] <- 0
computeStr(A, teamStr, c, tolRel, tolScale)
A[1, 2] <- 7
computeStr(A, teamStr, c, tolRel, tolScale)
c <- 0.4
computeStr(A, teamStr, c, tolRel, tolScale)
A[1, 2] <- 1
computeStr(A, teamStr, c, tolRel, tolScale)
A[1, 2] <- 31
computeStr(A, teamStr, c, tolRel, tolScale)
q()
A[1, 2] <- 1
computeStr(A, teamStr, c, tolRel, tolScale)
matrix(c(1, 2))
matrix(c(1, 2))
matrix(c(1, 2))
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
1 / matrix(c(1, 2))
matrix(c(1, 2))
A * matrix(c(1, 2))
A %*% matrix(c(1, 2))
source("computeStr.R")
computeStr(A, teamStr, c, tolRel, tolScale)
matrix(c(1, 2))
matrix(c(1, 2), c(1, 2))
matrix(c(c(1, 2), c(1, 2)))
matrix(c(c(1, 2), c(1, 2)), 2, 2)
source("computeStrNext.R")
computeStrNext(matrix(1, 2, 2), matrix(2, 2, 2), c(1, 1))
teamStr <- matrix(1, 2, 2)
strPost <- matrix(2, 2, 2)
alphas <- c()
alphas <- 0.5 * c(1, 1)
alphas <- c(0.5, 0.5)
alphas * strPost
alphas %*% strPost
A
teamStr
teamStr * strPost
alphas
alphas * teamStr
alphas * teamStr + (1 - alphas) * strPost
alphas * strPost + (1 - alphas) * teamStr
source("computeStrNext.R")
computeStrNext(teamStr, strPost, alphas)
computeStrNext(teamStr, strPost, c(0.1, 0.1))
q()
