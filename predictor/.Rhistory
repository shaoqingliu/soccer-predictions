s <- "HomeAttack"
C[, s] <- log(C[, s])
C
C[, s]
source("test.R")
source("test.R")
source("test.R")
  strVars <- c("HomeAttack", "HomeDefense",
      "AwayAttack", "AwayDefense")
strVars
  matches <- apply(strVars, 1, function(strVar, matches)
      matches[, strVar] <- log(matches[, strVar]), matches = matches)
      matches[, strVar] <- log(matches[, strVar]), matches = matches)
numcol(strVars)
ncol(strVars)
nrow(strVars)
strVars
source("test.R")
source("test.R")
  strVars <- c("HomeAttack", "HomeDefense",
      "AwayAttack", "AwayDefense", drop=FALSE)
strVars
x <- (1, 2, 3, 4)
x <- c(1, 2, 3, 4)
ncol(x)
nrow(x)
x <- list(1, 2, 3, 4)
x
nrow(x)
nxol(x)
ncol(x)
x <- vectot(1, 2, 3, 4)
x <- vector(1, 2, 3, 4)
x <- vector(1, 4)
x <- vector(mode="character", 4)
nrow(x)
ncol(x)
x[1] <- "Hello"
ncol(x)
x <- vector(mode="character", 4, drop=FALSE)
strVars <- c("HomeAttack", "HomeDefense")
matrix(strVars, nrow=1, ncol=2)
M <- matrix(strVars, nrow=1, ncol=2)
nrow(M)
source("test.R")
source("test.R")
write.csv(matches, "predictedMatches.csv")
summary(matches)
summary(matches)
source("test.R")
matches
summar(matches)
summary(matches)
C <- summary(matches)
C[1]
C[2]
C[3]
C[4]
C[5]
C <- summary(matches)
source("test.R")
source("test.R")
source("test.R")
names(matches)
matches
source("test.R")
C <- matches
C["HomeAttack"] <- log(C["HomeAttack"])
C
summary(C)
source("test.R")
source("test.R")
write.csv(matches, "predictedMatches.csv")
summary(matches)
summary(C)
summary(matches)
source("test.R")
source("test.R")
matches
summary(matches)
matches
source("test.R")
summary(matches)
write.csv(matches, "predictedMatches.csv")
summary(matches)
S <- summary(matches)
S[1]
S[2]
source("test.R")
source("test.R")
source("test.R")
  strVars <- c("HomeAttack", "HomeDefense",
      "AwayAttack", "AwayDefense")
length(strVars)
source("test.R")
source("test.R")
source("test.R")
source("test.R")
matches
summary(matches)
source("test.R")
model
source("test.R")
source("test.R")
source("test.R")
source("test.R")
q
q()
source("forecastGoals.R")
model
names(model)
names(model).residuals
names(model)&residuals
names(model)$residuals
model$residuals
stripcharr(model$residuals[1])
stripchart(model$residuals[1])
summary(stripchart(model$residuals[1]))
q()
source("forecastGoals.R")
model
source("forecastGoals.R")
1e-06
1e-06 < 1
source("forecastGoals.R")
model
model
source("forecastGoals.R")
model
model$residuals
summary(model$residuals)
std(model$residuals)
sd(model$residuals)
c(model$residuals[1], model$residuals[2])
x <- c(model$residuals[1], model$residuals[2])
x
summary(x)
x <- matrixc(model$residuals[1], model$residuals[2])
x <- matrix(c(model$residuals[1], model$residuals[2]))
summary(x)
source("forecastGoals.R")
source("forecastGoals.R")
verifyModel(model)
model$residuals[1]
sd(model$residuals[1])
sd(c(1, 2, 3, 4))
sd(unlist(model$residuals[1]))
sd(unlist(model$residuals[2]))
sd(unlist(model$residuals))
sd(unlist(model$residuals))
print(sd(unlist(model$residuals)))
verifyModel(model)
source("forecastGoals.R")
print("var="sd(unlist(model$residuals)))
print("var=", sd(unlist(model$residuals)))
sprintf("var=%d", sd(unlist(model$residuals)))
sprintf("var=%f", sd(unlist(model$residuals)))
sprintf("sd=%f", sd(unlist(model$residuals)))
sprintf("sd = %f", sd(unlist(model$residuals)))
sprintf("sd = %.4f", sd(unlist(model$residuals)))
sprintf(summary(model$residuals))
sprintf("modelErr = "summary(model$residuals))
sprintf("modelErr = ", summary(model$residuals))
sprintf("modelErr = s", summary(model$residuals))
sprintf("modelErr = f", summary(model$residuals))
sprintf("modelErr = %", summary(model$residuals))
sprintf(summary(model$residuals))
sprintf("modelErr = %s", printf(summary(model$residuals))
sprintf("modelErr = %s", printf(summary(model$residuals)))
sprintf("modelErr = %s", print(summary(model$residuals)))
sprintf("modelErr = %s", str(summary(model$residuals)))
sprintf("modelErr = %s", str(summary(model$residuals)))
source("forecastGoals.R")
sprintf(summary(model$residuals))
summary(model$residuals)
M <- summary(model$residuals)
names(M)
M
M[1]
M[2]
M[3]
M[4]
M[5]
M[6]
M[7] = []
M[7] = c(sd(unlist(mode$residuals[1])))
M[7] = c(sd(unlist(model$residuals[1]), sd(unlist(model$residuals[2]))))
M
M[7] = c(sd(unlist(model$residuals[1]), sd(unlist(model$residuals[2]))))
M[7]
M[1]
M[2]
M[3]
M[4]
M[5]
M[6]
M[7]
M[7, ]
source("forecastGoals.R")
verifyModel(model)
names(model)
model
model$AIC
source("forecastGoals.R")
model
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
model
verifyModel(model)
model$BIC
model$AIC
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
model
verifyModel(model)
model$BIC
model$AIC
model$AIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
model
model$AIC
model$BIC
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
model
verifyModel(model)
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
model
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
verifyModel(model)
model$AIC
source("forecastGoals.R")
model$AIC
model$BIC
model$AIC
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
model
model$AIC
model$BIC
paste(verifyModel(model))
verifyModel(model)
model
source("forecastGoals.R")
model
source("forecastGoals.R")
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
verifyModel(model)
model$BIC
model$AIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC\
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
q()
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
exit
q()
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
q()
source("forecastGoals.R")
model
model.AIC
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
model$BIC
source("forecastGoals.R")
model$BIC
model$AIC
model
source("forecastGoals.R")
model$AIC
model$BIC
model
model
model
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
matches
nrows(matches)
nrow(matches)
C <- matches
sortedC <- C[order(-Date)]
sortedC <- C[order(-Date)]
C&Date
C$Date
sortedC <- C[order(-Date), ]
names(C)
sortedC <- C[order(-"Date"), ]
sortedC <- C[order(-), ]
sortedC <- C[order(-C$Date), ]
C$Date
sortedC <- C[order(-C$Date), ]
sortedC <- C[order(C$Date), ]
sortedC <- C[order(C$Date), decreasing=TRUE]
sortedC <- C[order(C$Date, decreasing=TRUE)]
sortedC <- C[order(C$Date)]
sortedC <- C[order(C$Date), ]
sortedC <- C[order(rev(C$Date)), ]
sortedC
sortedC <- C[order(rev(C$Date)), ]
sortedC$Date
sortedC <- C[order(C$Date), ]
sortedC$Date
source("forecastGoals.R")
teams <- h()
matches
matches$HomeTeam
unique(matches$HomeTeam)
length(unique(matches$HomeTeam))
list[a, b] = c(1, 2)
L = c(1, 2)
L <- list[1, 2]
h = hash()
h[["England]] <- matrix(c(1, 2, 3, 4), 2, 2)
h
h[["England]] <- matrix(c(1, 2, 3, 4), 2, 2))
h[["England]] <- matrix(c(1, 2, 3, 4), 2, 2)))
h[["England]] <- matrix(c(1, 2, 3, 4))
h["England] <- matrix(c(1, 2, 3, 4))
help matrix
help(matrix)
matrix(c(1, 2, 3, 4))
h["England"] <- matrix(c(1, 2, 3, 4))
h
h["England"] <- matrix(c(1, 2, 3, 4), 2, 2)
h
matrix(c(1, 2, 3, 4), 2, 2)
h["England"] <- matrix(c(1, 2, 3, 4), 2, 2)
h["England"]
str <- h["England"]
str
str[1, 1]
str <- h[["England"]]
str[1, 1]
str
length(unique(matches[, "HomeTeam"))
matches[, "HomeTeam"]
length(unique(matches[, "HomeTeam"])
length(unique(matches[, "HomeTeam"]))
~True
!True
h = hash()
h <- hash()
h["Portugal"] <- c(1, 2)
h[["Portugal"]]
str <- h[["Portugal"]]
str[1]
str[2]
strcat("Home", "Team")
paste("Home", "Team")
paste("Home", "Team", sep="")
matches[1, "HomeTeam"]
match <- matches[1, ]
match
match["HomeTeam"]
match
matches[1, ] <- match
h.hasKey("Portugal")
help(hash)
h.has.key("Portugal")
has.key("Portugal", h)
has.key(h, "Portugal")
source("constructTeams.R")
source("constructTeams.R")
source("constructTeams.R")
teams <- constructTeams(matches)
teams <- constructTeams(matches)
teams <- constructTeams(matches)
has.key("Portugal", h)
teams <- constructTeams(matches)
teams <- constructTeams(matches)
1 < 5 && 2 < 5
1 < 5 && 2 < 5
1 <= 5 && 2 < 5
source("constructTeams.R")
teams <- constructTeams(matches)
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
numTeams <- length(unique(matches[1, "HomeTeam"]))
numTeams
numTeams <- length(unique(matches[, "HomeTeam"]))
numTeams
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
teams
teams <- constructTeams(matches)
teams
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
FALSE
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
teams
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
teams
q()
source("forecastGoals.R")
source("forecastGoals.R")
teams
q()
