M[6]
M[7] = []
M[7] = c(sd(unlist(mode$residuals[1])))
M[7] = c(sd(unlist(model$residuals[1]), sd(unlist(model$residuals[2]))))
M
M[7] = c(sd(unlist(model$residuals[1]), sd(unlist(model$residuals[2]))))
M[7]
M[1]
M[2]
M[3]
M[4]
M[5]
M[6]
M[7]
M[7, ]
source("forecastGoals.R")
verifyModel(model)
names(model)
model
model$AIC
source("forecastGoals.R")
model
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
model
verifyModel(model)
model$BIC
model$AIC
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
model
verifyModel(model)
model$BIC
model$AIC
model$AIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
model
model$AIC
model$BIC
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
model
verifyModel(model)
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
model
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
verifyModel(model)
model$AIC
source("forecastGoals.R")
model$AIC
model$BIC
model$AIC
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
source("forecastGoals.R")
model
model$AIC
model$BIC
paste(verifyModel(model))
verifyModel(model)
model
source("forecastGoals.R")
model
source("forecastGoals.R")
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
verifyModel(model)
model$BIC
model$AIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC\
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
q()
source("forecastGoals.R")
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
exit
q()
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
q()
source("forecastGoals.R")
model
model.AIC
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
source("forecastGoals.R")
model$AIC
model$BIC
model$BIC
source("forecastGoals.R")
model$BIC
model$AIC
model
source("forecastGoals.R")
model$AIC
model$BIC
model
model
model
verifyModel(model)
verifyModel(model)
source("forecastGoals.R")
verifyModel(model)
source("forecastGoals.R")
source("forecastGoals.R")
verifyModel(model)
model$AIC
model$BIC
verifyModel(model)
source("forecastGoals.R")
matches
nrows(matches)
nrow(matches)
C <- matches
sortedC <- C[order(-Date)]
sortedC <- C[order(-Date)]
C&Date
C$Date
sortedC <- C[order(-Date), ]
names(C)
sortedC <- C[order(-"Date"), ]
sortedC <- C[order(-), ]
sortedC <- C[order(-C$Date), ]
C$Date
sortedC <- C[order(-C$Date), ]
sortedC <- C[order(C$Date), ]
sortedC <- C[order(C$Date), decreasing=TRUE]
sortedC <- C[order(C$Date, decreasing=TRUE)]
sortedC <- C[order(C$Date)]
sortedC <- C[order(C$Date), ]
sortedC <- C[order(rev(C$Date)), ]
sortedC
sortedC <- C[order(rev(C$Date)), ]
sortedC$Date
sortedC <- C[order(C$Date), ]
sortedC$Date
source("forecastGoals.R")
teams <- h()
matches
matches$HomeTeam
unique(matches$HomeTeam)
length(unique(matches$HomeTeam))
list[a, b] = c(1, 2)
L = c(1, 2)
L <- list[1, 2]
h = hash()
h[["England]] <- matrix(c(1, 2, 3, 4), 2, 2)
h
h[["England]] <- matrix(c(1, 2, 3, 4), 2, 2))
h[["England]] <- matrix(c(1, 2, 3, 4), 2, 2)))
h[["England]] <- matrix(c(1, 2, 3, 4))
h["England] <- matrix(c(1, 2, 3, 4))
help matrix
help(matrix)
matrix(c(1, 2, 3, 4))
h["England"] <- matrix(c(1, 2, 3, 4))
h
h["England"] <- matrix(c(1, 2, 3, 4), 2, 2)
h
matrix(c(1, 2, 3, 4), 2, 2)
h["England"] <- matrix(c(1, 2, 3, 4), 2, 2)
h["England"]
str <- h["England"]
str
str[1, 1]
str <- h[["England"]]
str[1, 1]
str
length(unique(matches[, "HomeTeam"))
matches[, "HomeTeam"]
length(unique(matches[, "HomeTeam"])
length(unique(matches[, "HomeTeam"]))
~True
!True
h = hash()
h <- hash()
h["Portugal"] <- c(1, 2)
h[["Portugal"]]
str <- h[["Portugal"]]
str[1]
str[2]
strcat("Home", "Team")
paste("Home", "Team")
paste("Home", "Team", sep="")
matches[1, "HomeTeam"]
match <- matches[1, ]
match
match["HomeTeam"]
match
matches[1, ] <- match
h.hasKey("Portugal")
help(hash)
h.has.key("Portugal")
has.key("Portugal", h)
has.key(h, "Portugal")
source("constructTeams.R")
source("constructTeams.R")
source("constructTeams.R")
teams <- constructTeams(matches)
teams <- constructTeams(matches)
teams <- constructTeams(matches)
has.key("Portugal", h)
teams <- constructTeams(matches)
teams <- constructTeams(matches)
1 < 5 && 2 < 5
1 < 5 && 2 < 5
1 <= 5 && 2 < 5
source("constructTeams.R")
teams <- constructTeams(matches)
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
numTeams <- length(unique(matches[1, "HomeTeam"]))
numTeams
numTeams <- length(unique(matches[, "HomeTeam"]))
numTeams
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
teams
teams <- constructTeams(matches)
teams
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
FALSE
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
teams
source("constructTeams.R")
teams <- constructTeams(matches)
source("constructTeams.R")
teams <- constructTeams(matches)
teams
q()
source("forecastGoals.R")
source("forecastGoals.R")
teams
q()
matches
names(matches)
meanGoalsMap["Knockout"]
meanGoalsMap["knockout"]
meanGoalsMap[["knockout"]]
homeMeanGoals
meansGoalsMap
source("forecastGoals.R")
source("fitGoals.R")
source("fitGoals.R")
source("fitGoals.R")
source("fitGoals.R")
source("fitGoals.R")
meanGoalsMap
source("fitGoals.R")
verifyModel(model)
model$AIC
model$BIC
names(model)
model$beta
model$beta1
model$beta1[1]
model$beta1[[1]]
model$beta1[[2]]
model$beta1[[3]]
model$beta1[[2]]
model$beta1[[3]]
model$beta2
model$beta3
model$beta3[1]
model$beta3[[1]]
names(model)
model$parameters
source("fitGoals.R")
source("fitGoals.R")
source("fitGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
model$beta1
model$beta1[1]
model$beta1[[1]]
teams[["Portugal"]]
homeStr <- teams[["Portugal"]]
homeStr
homeStr[1]
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
df <- data.frame()
df
df[, "HomeGoals"] <- 5
df[, "HomeGoals"] <- [5]
df[, "HomeGoals"] <- c(1)
df[1, "HomeGoals"] <- c(1)
df
df[1, "HomeGoals"] <- 1
df[1, "AwayGoals"] <- 1
df
source("forecastGoals.R")
list("integer" = 1, "names" = 1)
d = list("integer" = 1, "names" = 1)
d
source("forecastGoals.R")
list("teams"=teams, "matches"=matches)
L <- list("teams"=teams, "matches"=matches)
L
L$matches
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
exp(c(1, 2, 3))
source("forecastGoals.R")
exp(c(1, 2, 3))
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
matrix(nrow=20, ncol=20)
M <- matrix(nrow=20, ncol=20)
M <- matrix(nrow=21, ncol=21)
M
M
help(mapply)
matrix(mapply(function(x, i, j) x + i + j, M, row(M), col(M)), nrow = nrow(M))
matrix(mapply(function(x, i, j) x + i + j, M, row(M), col(M)), nrow = nrow(M))
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
)
)
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
homeAwayGoals <- forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
homeAwayGoals
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
homeAwayGoals
source("forecastGoals.R")
forecastGoals("Portugal", "Spain", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "France", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Andorra", teams, model, meanGoalsMap, "group")
forecastGoals("Portugal", "Andorra", teams, model, meanGoalsMap, "qualifier")
forecastGoals("Portugal", "San Marino", teams, model, meanGoalsMap, "qualifier")
source("fitGoals.R")
verifyModel(model)
model$AIC
model$BICc
model$BIC
source("")
source("fitGoals.R")
source("fitGoals.R")
source("fitGoals.R")
source("fitGoals.R")
source("forecastMatch.R")
forecastMatch("Portugal", "Andorra", "qualifier")
source("forecastMatch.R")
forecastMatch("Portugal", "Andorra", "qualifier")
source("forecastMatch.R")
forecastMatch("Portugal", "Andorra", "qualifier")
forecastMatch("Portugal", "Spain", "qualifier")
forecastMatch("Spain", "Spain", "qualifier")
forecastMatch("Spain", "Portugal", "qualifier")
forecastMatch("Spain", "Portugal", "group")
forecastMatch("Spain", "Portugal", "knockout")
forecastMatch("Spain", "Slovakia", "knockout")
forecastMatch("Spain", "Slovakia", "group")
forecastMatch("Spain", "Slovakia", "qualifier")
q()
source("forecastMatch.R")
source("fitGoals.R")
forecastMatch("Spain", "Slovakia", "group")
forecastMatch("Belgium", "Hungary", "group")
forecastMatch("Belgium", "Hungary", "group")
forecastMatch("Germany", "Slovakia", "group")
forecastMatch("Slovakia", "Slovakia", "group")
forecastMatch("Slovakia", "Germany", "group")
forecastMatch("France", "Republic of Ireland", "group")
verifyModel(model)
model<-AIC
verifyModel(model)
source("fitGoals.R")
model$AIC
model$BIC
source("fitGoals.R")
model$AIC
modelBIC
model$BIC
verifyModel(model)
forecastMatch("France", "Republic of Ireland", "knockout")
forecastMatch("Germany", "Slovakia", "knockout")
teams[["Slovakia"]]
teams[["Germany"]]
source("fitGoals.R")
teams[["Germany"]]
forecastMatch("France", "Republic of Ireland", "knockout")
forecastMatch("Germany", "Slovakia", "knockout")
forecastMatch("France", "Republic of Ireland", "knockout")
forecastMatch("Germany", "Slovakia", "knockout")
forecastMatch("Germany", "Slovakia", "group")
forecastMatch("Germany", "Slovakia", "knockout")
forecastMatch("Hungary", "Belgium", "knockout")
q()
teams("Spain")
source("fitGoals.R")
teams("Spain")
teams
teams["Spain"]
teams["Germany"]
teams["Croatia"]
teams["France"]
teams["Poland"]
teams["Switzerland"]
q()
